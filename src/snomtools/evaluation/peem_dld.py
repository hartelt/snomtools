"""
This file provides data evaluation scripts for energy-resolved PEEM data measured with the DLD.
The methods typically work on DataSets obtained by importing tiff files generated by Terra.
Energy calibration in the image shall be done first in Terra by applying maxima maps.
For further info about data structures, see:
data.imports.tiff.py
data.datasets.py

"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
import snomtools.calcs.units as u
import snomtools.data.datasets
import snomtools.data.imports.tiff
import snomtools.evaluation.microscopy
import os.path

__author__ = 'hartelt'


def energy_scale_quadratic(channel_axis, C, t_0):
	"""
	Energy scaling calculated for the time channel axis of a DataSet containing DLD PEEM data, Quadratic version.

	:param channel_axis: The Axis instance containing the channel numbers as data.

	:param C: The fit parameter C as in the energy calibration files from Terra (.kalfit.txt).

	:param t_0: The fit parameter C as in the energy calibration files from Terra (.kalfit.txt).

	:return: A new Axis instance with energy scaling, that can replace the channel axis in the DataSet.
	"""
	t_0 = u.to_ureg(t_0, '')
	c_square = u.to_ureg(C ** 2, 'eV')
	channels = channel_axis.get_data()
	energy_points = c_square / (channels - t_0) ** 2
	return snomtools.data.datasets.Axis(energy_points, label="energy",
										plotlabel="Electron Energy / \\si{\electronvolt}")


def energy_scale_linear(channel_axis, a, b):
	"""
	Energy scaling calculated for the time channel axis of a DataSet containing DLD PEEM data, Linear version.

	:param channel_axis: The Axis instance containing the channel numbers as data.

	:param a: The fit parameter a as in the energy calibration files from Terra (.kalfit.txt).

	:param b: The fit parameter b as in the energy calibration files from Terra (.kalfit.txt).

	:return: A new Axis instance with energy scaling, that can replace the channel axis in the DataSet.
	"""
	a = u.to_ureg(a, 'eV')
	b = u.to_ureg(b, 'eV')
	channels = channel_axis.get_data()
	energy_points = a * channels + b
	return snomtools.data.datasets.Axis(energy_points, label="energy",
										plotlabel="Electron Energy / \\si{\electronvolt}")


def energy_get_fitparams_quadratic(filename):
	"""
	Reads the quadratic fit parameters from the kalfit.txt files.
	Usage;
	C,t0 = energy_get_fitparams_quadratic('04-Energiekalibrierung.kalfit.txt')

	:param filename: The absolute or relative path of the textfile with the fit parameters.

	:return: The fitparameters as a tuple C,t0
	"""
	filepath = os.path.abspath(filename)
	try: # python 2
		with open(filepath, 'r') as fitfile:
			lines = fitfile.readlines()
	except UnicodeDecodeError as e: # python 3
		with open(filepath, 'r', encoding='ISO-8859-1') as fitfile:
			lines = fitfile.readlines()
	# The lines we are looking for look like this:
	# C=118259,8710948820
	# t0=-24977,8555008616
	C = None
	t0 = None
	for line in lines:
		line = line.strip()
		if line.startswith('C='):
			line = line.replace('C=', '')
			line = line.replace(',', '.')
			C = float(line)
		if line.startswith('t0='):
			line = line.replace('t0=', '')
			line = line.replace(',', '.')
			t0 = float(line)
		if C and t0:
			return C, t0
	raise RuntimeError("Fit Parameters not found in file.")


def energy_get_fitparams_linear(filename):
	"""
	Reads the quadratic fit parameters from the kalfit.txt files.
	Usage:
	a,b = energy_get_fitparams_linear('04-Energiekalibrierung.kalfit.txt')

	:param filename: The absolute or relative path of the textfile with the fit parameters.

	:return: The fitparameters as a tuple C,t0
	"""
	filepath = os.path.abspath(filename)
	fitfile = open(filepath, 'r')
	lines = fitfile.readlines()
	# The lines we are looking for look like this:
	# a=-0,0015635827  +- 0,0000316005
	# b=22,2875623476  +- 0,0375883697
	a = None
	b = None
	for line in lines:
		line = line.strip()
		if line.startswith('a='):
			line = line.replace('a=', '')
			line = line.replace(',', '.')
			astr, aerr = line.split(' +- ')
			a = float(astr)
		if line.startswith('b='):
			line = line.replace('b=', '')
			line = line.replace(',', '.')
			bstr, berr = line.split(' +- ')
			b = float(bstr)
		if a and b:
			return a, b
	raise RuntimeError("Fit Parameters not found in file.")


def energy_apply_calibration(data, kalfitfilename, mode='quadratic'):
	"""
	Applies an energy calibration from a kalfit.txt file to a DLD DataSet. The channel axis will be replaced with an
	energy axis.

	:param data: The DataSet instance of the data to normalize or a string with the filepath of the Tiff file from PEEM.

	:param kalfitfilename: The filename of the text file from Terra that contains Energy Calibration fit parameters.
		Usually this file's name ends with "kalfit.txt".

	:param mode: The mode for the energy calculation. Options:
		'quadradic' (default) and 'linear'

	:return: The modified dataset.
	"""
	if type(data) == str:  # if tiff file is given, import it.
		filepath = os.path.abspath(data)
		data = snomtools.data.imports.tiff.peem_dld_read_terra(filepath)
	assert isinstance(data, snomtools.data.datasets.DataSet), "ERROR: No DataSet given or imported."

	if mode == 'quadratic':
		C, t0 = energy_get_fitparams_quadratic(kalfitfilename)
		energy_axis = energy_scale_quadratic(data.get_axis('channel'), C, t0)
	elif mode == 'linear':
		a, b = energy_get_fitparams_linear(kalfitfilename)
		energy_axis = energy_scale_quadratic(data.get_axis('channel'), a, b)
	else:
		raise RuntimeError("Invalid energy calibration mode.")
	data.replace_axis('channel', energy_axis)
	return data


def normalize_by_flatfield_sum(data, flatfield_data, data_id=0, flat_id=0, newlabel='norm_int',
							   new_plotlabel="Normalized Intensity"):
	"""
	Normalizes a dataset by the data of another set, that was obtained on an unstructured surface and should
	therefore be "flat" (flatfield). The data is normalized by the sum over all energy channels, so only the spacial
	image is normalized, while all time channels are kept at constant relative values.
	The normalized data is written into a new DataArray in the given DataSet.
	This function essentially shadows the function of the same name in snomtools.evaluation.microscopy, but adds a
	standard import for PEEM DLD tiff files.

	:param data: The DataSet instance of the data to normalize or a string with the filepath of the Tiff file from PEEM.

	:param flatfield_data: The DataSet instance of the flatfield correction to apply or a string with the filepath of
		the Tiff file from PEEM.

	:param data_id: A valid identifier of the DataArray in the DataSet instance to apply normalization to. Per
		default, the first DataArray is taken.

	:param flat_id: A valid identifier of the DataArray in the flatfield DataSet instance to take as reference. Per
		default, the first DataArray is taken.

	:param newlabel: The label to set for the created DataArray.

	:param new_plotlabel: The plotlabel to set for the created DataArray.

	:return: The modified dataset.
	"""
	if type(data) == str:
		filepath = os.path.abspath(data)
		filebase, ext = os.path.splitext(filepath)
		if ext == ".tif":
			data = snomtools.data.imports.tiff.peem_dld_read_terra(filepath)
	if type(flatfield_data) == str:
		filepath = os.path.abspath(flatfield_data)
		filebase, ext = os.path.splitext(filepath)
		if ext == ".tif":
			flatfield_data = snomtools.data.imports.tiff.peem_dld_read_terra(filepath)

	return snomtools.evaluation.microscopy.normalize_by_flatfield_sum(data, flatfield_data, data_id, flat_id, newlabel,
																	  new_plotlabel)
